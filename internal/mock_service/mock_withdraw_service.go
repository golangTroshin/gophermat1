// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/withdraw_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/golangTroshin/gophermat/internal/model"
)

// MockWithdrawService is a mock of WithdrawService interface.
type MockWithdrawService struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawServiceMockRecorder
}

// MockWithdrawServiceMockRecorder is the mock recorder for MockWithdrawService.
type MockWithdrawServiceMockRecorder struct {
	mock *MockWithdrawService
}

// NewMockWithdrawService creates a new mock instance.
func NewMockWithdrawService(ctrl *gomock.Controller) *MockWithdrawService {
	mock := &MockWithdrawService{ctrl: ctrl}
	mock.recorder = &MockWithdrawServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawService) EXPECT() *MockWithdrawServiceMockRecorder {
	return m.recorder
}

// GetUserWithdrawals mocks base method.
func (m *MockWithdrawService) GetUserWithdrawals(userID uint) ([]model.UserWithdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", userID)
	ret0, _ := ret[0].([]model.UserWithdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockWithdrawServiceMockRecorder) GetUserWithdrawals(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockWithdrawService)(nil).GetUserWithdrawals), userID)
}

// RecordWithdrawal mocks base method.
func (m *MockWithdrawService) RecordWithdrawal(withdrawal *model.UserWithdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordWithdrawal", withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordWithdrawal indicates an expected call of RecordWithdrawal.
func (mr *MockWithdrawServiceMockRecorder) RecordWithdrawal(withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordWithdrawal", reflect.TypeOf((*MockWithdrawService)(nil).RecordWithdrawal), withdrawal)
}
